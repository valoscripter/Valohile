local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local POSITION_SETS = {
    OR = {
        {
            Name = "• 1. Parkur",
            Positions = {
                Vector3.new(2803.49, 36.69, -849.68),
                Vector3.new(2801.20, 38.85, -847.44),
                Vector3.new(2798.35, 38.99, -845.94),
                Vector3.new(2795.23, 36.95, -845.97),
                Vector3.new(2792.64, 33.63, -847.64)
            }
        },
        {
            Name = "• 2. Parkur",
            Positions = {
                Vector3.new(2577.29, 31.84, -984.10),
                Vector3.new(2577.15, 34.09, -989.52),
                Vector3.new(2577.07, 37.57, -992.72),
                Vector3.new(2576.98, 39.13, -996.32),
                Vector3.new(2576.73, 38.29, -999.78)
            }
        },
        {
            Name = "• 3. Parkur",
            Positions = {
                Vector3.new(2464.44, 31.84, -1051.09),
                Vector3.new(2464.27, 35.14, -1056.09),
                Vector3.new(2464.88, 38.43, -1059.24),
                Vector3.new(2466.65, 39.06, -1059.35),
                Vector3.new(2466.92, 41.21, -1059.93)
            }
        }
    },
    TA = {
        {
            Name = "• 1. Parkur",
            Positions = {
                Vector3.new(2803.49, 36.69, -849.68),
 Vector3.new(2801.20, 38.85, -847.44),
 Vector3.new(2798.35, 38.99, -845.94),
 Vector3.new(2795.23, 36.95, -845.97),
 Vector3.new(2792.64, 33.63, -847.64),
 Vector3.new(2790.39, 37.82, -849.92),
 Vector3.new(2788.06, 40.55, -852.29),
 Vector3.new(2786.48, 41.15, -854.96),
 Vector3.new(2785.28, 39.62, -857.62),
 Vector3.new(2783.57, 36.14, -858.60),
 Vector3.new(2780.87, 39.84, -856.24),
 Vector3.new(2778.64, 42.58, -853.95),
 Vector3.new(2776.48, 43.35, -851.66),
 Vector3.new(2773.66, 42.08, -850.42),
 Vector3.new(2770.21, 40.33, -850.24),
 Vector3.new(2766.75, 43.42, -850.30),
 Vector3.new(2763.67, 46.74, -850.93),
 Vector3.new(2761.27, 47.93, -852.84),
 Vector3.new(2758.96, 47.08, -855.24),
 Vector3.new(2756.53, 44.45, -855.96),
 Vector3.new(2754.13, 48.43, -853.65),
 Vector3.new(2751.73, 51.15, -851.33),
 Vector3.new(2749.50, 51.77, -849.04),
 Vector3.new(2747.27, 50.42, -846.92),
 Vector3.new(2744.71, 48.08, -847.39),
 Vector3.new(2742.21, 52.08, -849.60),
 Vector3.new(2739.71, 54.81, -851.81),
 Vector3.new(2737.12, 55.38, -854.11),
 Vector3.new(2734.73, 53.87, -856.24),
 Vector3.new(2731.86, 53.96, -856.94),
 Vector3.new(2728.98, 57.88, -855.83),
 Vector3.new(2726.48, 59.70, -853.50),
 Vector3.new(2723.89, 59.28, -851.47),
 Vector3.new(2720.92, 56.72, -850.65),
 Vector3.new(2717.62, 54.90, -850.91),
 Vector3.new(2714.16, 58.03, -851.07),
 Vector3.new(2710.96, 61.01, -850.93),
 Vector3.new(2707.77, 62.04, -850.76),
 Vector3.new(2704.58, 61.10, -850.59),
 Vector3.new(2701.25, 58.03, -850.46),
 Vector3.new(2698.05, 54.86, -850.51),
 Vector3.new(2694.72, 55.02, -850.68),
 Vector3.new(2691.40, 59.25, -850.85),
 Vector3.new(2688.07, 61.81, -851.03),
 Vector3.new(2684.74, 62.24, -851.19),
 Vector3.new(2681.54, 60.64, -851.25),
 Vector3.new(2678.21, 56.90, -851.25),
 Vector3.new(2675.81, 53.03, -851.28),
 Vector3.new(2675.39, 54.62, -851.30),
 Vector3.new(2672.97, 54.98, -851.35),
 Vector3.new(2669.64, 55.01, -851.40),
 Vector3.new(2666.30, 58.71, -851.46),
 Vector3.new(2662.97, 61.52, -851.52),
 Vector3.new(2659.64, 62.21, -851.58),
 Vector3.new(2656.31, 60.76, -851.64),
 Vector3.new(2652.84, 57.00, -851.70),
 Vector3.new(2649.64, 54.95, -851.75),
 Vector3.new(2646.18, 54.90, -851.81),
 Vector3.new(2642.84, 58.36, -851.87),
 Vector3.new(2639.51, 61.34, -851.93),
 Vector3.new(2636.18, 62.20, -851.98),
 Vector3.new(2633.11, 61.10, -851.89),
 Vector3.new(2629.78, 57.87, -851.75),
 Vector3.new(2626.58, 52.76, -851.61),
 Vector3.new(2623.25, 45.35, -851.47),
 Vector3.new(2619.92, 35.82, -851.37),
 Vector3.new(2618.05, 31.64, -851.37),
 Vector3.new(2618.72, 31.84, -851.37),
 Vector3.new(2621.77, 31.84, -851.37),
 Vector3.new(2622.05, 35.52, -851.37),
 Vector3.new(2621.00, 37.41, -851.37),
 Vector3.new(2618.39, 37.18, -851.37),
 Vector3.new(2615.43, 37.72, -851.37),
 Vector3.new(2612.10, 41.25, -851.37),
 Vector3.new(2608.63, 44.31, -851.37),
 Vector3.new(2605.44, 45.09, -851.56),
 Vector3.new(2602.29, 43.90, -852.14),
 Vector3.new(2599.10, 40.98, -852.25),
 Vector3.new(2595.91, 42.50, -852.04),
 Vector3.new(2592.44, 46.62, -851.99),
 Vector3.new(2589.12, 48.41, -852.17),
 Vector3.new(2585.93, 48.13, -852.33),
 Vector3.new(2582.73, 45.88, -852.50),
 Vector3.new(2579.54, 41.67, -852.70),
 Vector3.new(2576.21, 44.12, -852.92),
 Vector3.new(2573.01, 47.35, -852.98),
 Vector3.new(2569.41, 48.64, -852.92),
 Vector3.new(2566.21, 47.70, -852.79),
 Vector3.new(2563.02, 44.80, -852.60),
 Vector3.new(2559.70, 42.47, -852.31),
 Vector3.new(2556.38, 41.63, -851.99),
 Vector3.new(2553.06, 41.65, -851.67),
 Vector3.new(2549.60, 41.65, -851.39),
 Vector3.new(2546.41, 41.65, -851.36),
 Vector3.new(2542.81, 46.25, -851.57),
 Vector3.new(2539.75, 48.60, -851.79),
 Vector3.new(2536.43, 49.12, -852.01),
 Vector3.new(2533.40, 47.50, -851.36),
 Vector3.new(2530.75, 43.75, -849.56),
 Vector3.new(2527.69, 41.54, -849.32),
 Vector3.new(2524.22, 44.93, -849.33),
 Vector3.new(2521.16, 47.83, -849.33),
 Vector3.new(2517.69, 48.93, -849.33),
 Vector3.new(2514.49, 47.91, -849.33),
 Vector3.new(2511.29, 44.93, -849.29),
 Vector3.new(2507.96, 41.50, -849.23),
 Vector3.new(2504.63, 45.57, -849.23),
 Vector3.new(2501.43, 48.31, -849.26),
 Vector3.new(2498.10, 49.08, -849.28),
 Vector3.new(2494.90, 47.81, -849.31),
 Vector3.new(2491.57, 44.41, -849.19),
 Vector3.new(2488.24, 41.54, -848.95),
 Vector3.new(2484.91, 46.13, -848.83),
 Vector3.new(2481.71, 48.55, -848.89),
 Vector3.new(2478.25, 48.95, -848.95),
 Vector3.new(2475.05, 47.27, -849.00),
 Vector3.new(2471.59, 43.24, -848.89),
 Vector3.new(2468.29, 41.60, -848.37),
 Vector3.new(2465.09, 41.65, -847.48),
 Vector3.new(2462.30, 41.65, -845.93),
 Vector3.new(2459.60, 41.65, -843.97),
 Vector3.new(2457.16, 41.65, -841.51),
 Vector3.new(2454.96, 41.60, -839.01),
 Vector3.new(2452.77, 45.43, -836.49),
 Vector3.new(2450.63, 48.09, -834.12),
 Vector3.new(2448.36, 48.78, -831.68),
 Vector3.new(2446.18, 47.43, -829.34),
 Vector3.new(2443.91, 43.94, -826.90),
 Vector3.new(2441.73, 38.59, -824.56),
 Vector3.new(2439.43, 37.02, -822.14),
 Vector3.new(2437.18, 37.42, -819.69),
 Vector3.new(2435.26, 37.43, -817.13),
 Vector3.new(2433.83, 37.43, -813.56),
 Vector3.new(2434.00, 37.43, -810.38),
 Vector3.new(2434.65, 37.43, -807.25),
 Vector3.new(2435.36, 37.43, -804.13),
 Vector3.new(2435.48, 37.43, -800.80),
 Vector3.new(2435.52, 37.43, -797.46),
 Vector3.new(2435.69, 37.43, -794.14),
 Vector3.new(2435.88, 37.43, -790.67),
 Vector3.new(2436.44, 37.43, -787.53),
 Vector3.new(2437.43, 37.43, -784.49),
 Vector3.new(2438.58, 37.02, -781.50),
 Vector3.new(2440.35, 41.50, -778.55),
 Vector3.new(2443.20, 44.03, -776.73),
 Vector3.new(2446.25, 44.25, -775.08),
 Vector3.new(2449.19, 42.29, -773.52),
 Vector3.new(2452.01, 38.41, -772.01),
 Vector3.new(2454.96, 32.42, -770.45),
 Vector3.new(2457.90, 32.71, -768.93),
 Vector3.new(2461.19, 32.72, -769.66),
 Vector3.new(2464.14, 32.72, -768.13),
 Vector3.new(2467.08, 32.72, -766.56),
 Vector3.new(2470.02, 32.72, -765.00),
 Vector3.new(2472.99, 32.72, -763.49),
 Vector3.new(2476.02, 32.72, -762.08),
 Vector3.new(2479.22, 32.72, -760.77),
 Vector3.new(2482.53, 32.72, -760.43),
 Vector3.new(2485.73, 32.72, -760.51),
 Vector3.new(2489.06, 32.72, -760.59),
 Vector3.new(2492.39, 32.72, -760.68),
 Vector3.new(2495.86, 32.72, -760.77),
 Vector3.new(2499.06, 32.72, -760.85),
 Vector3.new(2502.39, 32.72, -760.95),
 Vector3.new(2505.59, 32.72, -761.06),
 Vector3.new(2509.05, 32.72, -761.18),
 Vector3.new(2512.25, 32.72, -761.30),
 Vector3.new(2515.72, 32.72, -761.42),
 Vector3.new(2519.05, 32.72, -761.53),
 Vector3.new(2522.38, 32.72, -761.57),
 Vector3.new(2525.72, 34.00, -761.48),
 Vector3.new(2529.04, 38.09, -761.31),
 Vector3.new(2532.37, 40.05, -761.13),
 Vector3.new(2535.70, 39.88, -760.96),
 Vector3.new(2538.89, 37.71, -760.79),
 Vector3.new(2540.27, 37.41, -760.72),
 Vector3.new(2538.61, 37.42, -760.81),
 Vector3.new(2537.83, 37.42, -760.85),
 Vector3.new(2538.13, 40.54, -760.81),
 Vector3.new(2539.62, 38.34, -760.68),
 Vector3.new(2541.29, 37.39, -760.59),
 Vector3.new(2541.64, 37.42, -760.57),
 Vector3.new(2539.98, 37.42, -760.66),
 Vector3.new(2538.31, 37.42, -760.75),
 Vector3.new(2536.71, 37.27, -760.83),
 Vector3.new(2535.24, 40.20, -760.91),
 Vector3.new(2535.28, 43.43, -760.94),
 Vector3.new(2536.80, 44.36, -761.01),
 Vector3.new(2537.48, 45.08, -761.04),
 Vector3.new(2537.84, 46.00, -761.05),
 Vector3.new(2536.25, 45.57, -760.98),
 Vector3.new(2535.01, 49.04, -760.93),
 Vector3.new(2535.23, 51.78, -760.94),
 Vector3.new(2536.67, 52.56, -761.00),
 Vector3.new(2537.32, 53.17, -761.03),
 Vector3.new(2537.58, 53.93, -761.03),
 Vector3.new(2539.07, 54.60, -761.02),
 Vector3.new(2537.70, 54.62, -761.03),
 Vector3.new(2536.23, 57.34, -761.04),
 Vector3.new(2536.11, 60.67, -761.05),
 Vector3.new(2537.41, 62.01, -761.03),
 Vector3.new(2538.64, 63.16, -761.02),
 Vector3.new(2539.95, 63.22, -761.01),
 Vector3.new(2538.53, 63.22, -761.02),
 Vector3.new(2536.95, 65.32, -761.04),
 Vector3.new(2536.59, 69.07, -761.04),
 Vector3.new(2537.47, 70.77, -761.03),
 Vector3.new(2538.97, 71.79, -761.02),
 Vector3.new(2539.89, 71.82, -761.01),
 Vector3.new(2538.12, 71.82, -761.03),
 Vector3.new(2537.56, 75.18, -761.03),
 Vector3.new(2537.79, 73.38, -759.94),
 Vector3.new(2539.28, 71.76, -759.80),
 Vector3.new(2540.86, 71.82, -759.79),
 Vector3.new(2539.90, 71.82, -759.79),
 Vector3.new(2538.30, 71.82, -759.81),
 Vector3.new(2536.57, 72.08, -759.83),
 Vector3.new(2535.71, 76.42, -759.83),
 Vector3.new(2536.40, 78.64, -759.83),
 Vector3.new(2537.54, 79.60, -759.82),
 Vector3.new(2538.69, 80.40, -759.81),
 Vector3.new(2537.20, 80.40, -759.82),
 Vector3.new(2535.76, 82.67, -759.83),
 Vector3.new(2535.71, 86.16, -759.83),
 Vector3.new(2536.96, 87.50, -759.82),
 Vector3.new(2538.17, 88.80, -759.81),
 Vector3.new(2537.99, 89.02, -759.81),
 Vector3.new(2536.41, 89.16, -759.83),
 Vector3.new(2535.73, 93.50, -759.83),
 Vector3.new(2536.61, 95.72, -759.83),
 Vector3.new(2537.56, 96.78, -759.82),
 Vector3.new(2538.78, 97.60, -759.81),
 Vector3.new(2537.55, 97.62, -759.82),
 Vector3.new(2536.06, 99.46, -759.83),
 Vector3.new(2535.72, 103.13, -759.83),
 Vector3.new(2536.76, 104.64, -759.82),
 Vector3.new(2537.87, 105.80, -759.82),
 Vector3.new(2541.00, 106.21, -759.79),
 Vector3.new(2544.20, 106.22, -759.76),
 Vector3.new(2547.40, 106.22, -759.73),
 Vector3.new(2550.73, 106.22, -759.70),
 Vector3.new(2554.07, 106.22, -759.67),
 Vector3.new(2557.40, 106.22, -759.65),
 Vector3.new(2560.73, 105.64, -759.62),
 Vector3.new(2564.06, 109.13, -759.59),
 Vector3.new(2567.26, 111.95, -759.56),
 Vector3.new(2570.60, 112.81, -759.53),
 Vector3.new(2573.80, 111.62, -759.50),
 Vector3.new(2577.13, 108.30, -759.47),
 Vector3.new(2580.46, 102.86, -759.45),
 Vector3.new(2583.66, 95.62, -759.63),
 Vector3.new(2586.98, 86.00, -759.89),
 Vector3.new(2590.30, 74.25, -760.21),
 Vector3.new(2593.62, 60.37, -760.53),
 Vector3.new(2596.81, 45.05, -760.84),
 Vector3.new(2599.11, 42.01, -759.74),
 Vector3.new(2600.14, 43.06, -758.52),
 Vector3.new(2601.32, 47.27, -757.32),
 Vector3.new(2602.62, 49.11, -757.40),
 Vector3.new(2603.91, 48.94, -758.45),
 Vector3.new(2605.15, 46.64, -759.56),
 Vector3.new(2606.59, 42.21, -760.15),
 Vector3.new(2608.26, 42.11, -760.23),
 Vector3.new(2609.79, 42.12, -760.15),
 Vector3.new(2610.85, 42.07, -758.96),
 Vector3.new(2611.91, 46.54, -757.51),
 Vector3.new(2613.12, 48.98, -756.48),
 Vector3.new(2614.32, 49.19, -756.90),
 Vector3.new(2615.45, 47.32, -758.12),
 Vector3.new(2616.58, 43.32, -759.35),
 Vector3.new(2617.67, 42.08, -760.54),
 Vector3.new(2619.80, 42.44, -762.85),
 Vector3.new(2622.11, 46.92, -765.28),
 Vector3.new(2623.98, 49.05, -767.26),
 Vector3.new(2626.28, 49.05, -769.68),
 Vector3.new(2628.72, 46.92, -771.50),
 Vector3.new(2631.08, 42.88, -771.81),
 Vector3.new(2633.62, 36.28, -770.53),
 Vector3.new(2635.94, 33.28, -768.35),
 Vector3.new(2638.26, 37.41, -766.14),
 Vector3.new(2640.68, 39.62, -763.85),
 Vector3.new(2642.88, 39.71, -762.54),
 Vector3.new(2645.40, 37.70, -762.85),
 Vector3.new(2647.91, 33.56, -764.48),
 Vector3.new(2650.91, 34.65, -764.50),
 Vector3.new(2654.50, 38.52, -764.15),
 Vector3.new(2657.69, 39.87, -763.85),
 Vector3.new(2660.87, 39.26, -763.54),
 Vector3.new(2664.20, 36.53, -763.31),
 Vector3.new(2667.53, 32.44, -763.23),
 Vector3.new(2670.86, 32.72, -763.02),
 Vector3.new(2674.19, 32.72, -762.95),
 Vector3.new(2677.38, 32.72, -763.17),
 Vector3.new(2680.56, 32.72, -763.42),
 Vector3.new(2683.89, 32.72, -763.68),
 Vector3.new(2687.07, 32.72, -763.94),
 Vector3.new(2690.27, 32.70, -764.07),
 Vector3.new(2693.47, 31.78, -764.18),
 Vector3.new(2697.07, 31.84, -764.26),
 Vector3.new(2700.13, 32.30, -764.28),
 Vector3.new(2702.91, 32.75, -762.96),
 Vector3.new(2705.04, 32.76, -760.69),
 Vector3.new(2708.34, 32.76, -760.27),
 Vector3.new(2711.53, 32.76, -759.65),
 Vector3.new(2713.59, 32.76, -757.03),
 Vector3.new(2715.88, 33.64, -754.58),
 Vector3.new(2719.07, 38.03, -753.81),
 Vector3.new(2722.40, 40.07, -753.89),
 Vector3.new(2725.03, 40.07, -754.04),
 Vector3.new(2725.10, 38.00, -754.22),
 Vector3.new(2725.09, 38.11, -755.20),
 Vector3.new(2724.95, 42.32, -756.21),
 Vector3.new(2724.97, 43.84, -756.47),
 Vector3.new(2725.06, 44.97, -756.67),
 Vector3.new(2725.08, 45.06, -756.90),
 Vector3.new(2725.06, 45.06, -756.89),
 Vector3.new(2725.08, 45.06, -756.90),
 Vector3.new(2724.99, 45.15, -756.95),
 Vector3.new(2724.96, 45.15, -756.95),
 Vector3.new(2724.92, 49.20, -757.41),
 Vector3.new(2724.88, 51.09, -758.42),
 Vector3.new(2724.58, 50.68, -759.88),
 Vector3.new(2724.54, 48.28, -760.11),
 Vector3.new(2724.54, 44.96, -760.11),
 Vector3.new(2724.10, 45.16, -761.58),
 Vector3.new(2724.26, 45.11, -763.22),
 Vector3.new(2724.10, 49.43, -764.79),
 Vector3.new(2724.06, 51.28, -766.36),
 Vector3.new(2723.97, 51.08, -767.95),
 Vector3.new(2724.14, 49.07, -769.52),
 Vector3.new(2724.28, 49.18, -770.15),
 Vector3.new(2723.99, 48.89, -768.41),
 Vector3.new(2723.90, 52.16, -766.86),
 Vector3.new(2724.02, 55.37, -766.43),
 Vector3.new(2724.07, 56.26, -765.42),
 Vector3.new(2724.27, 56.80, -764.11),
 Vector3.new(2724.33, 56.81, -763.20),
 Vector3.new(2724.67, 56.82, -762.57),
 Vector3.new(2724.74, 59.73, -763.62),
 Vector3.new(2724.39, 64.57, -764.50),
 Vector3.new(2723.87, 67.24, -765.92),
 Vector3.new(2723.26, 67.77, -767.47),
 Vector3.new(2723.09, 66.06, -769.06),
 Vector3.new(2724.30, 65.68, -769.36),
 Vector3.new(2724.55, 68.97, -768.62),
 Vector3.new(2725.95, 69.93, -767.10),
 Vector3.new(2728.10, 68.62, -764.57),
 Vector3.new(2730.22, 65.65, -762.00),
 Vector3.new(2732.49, 60.56, -759.68),
 Vector3.new(2735.35, 53.33, -758.64),
 Vector3.new(2738.26, 43.56, -759.12),
 Vector3.new(2741.52, 32.13, -759.57),
 Vector3.new(2744.71, 32.73, -759.73),
 Vector3.new(2748.04, 32.76, -759.89),
 Vector3.new(2751.24, 32.76, -760.03),
 Vector3.new(2754.70, 32.76, -760.16),
 Vector3.new(2757.90, 32.76, -760.27),
 Vector3.new(2761.10, 32.76, -760.38),
 Vector3.new(2764.44, 32.76, -760.50),
 Vector3.new(2767.63, 32.76, -760.61),
 Vector3.new(2770.97, 32.76, -760.72),
 Vector3.new(2774.03, 32.76, -760.83),
 Vector3.new(2777.37, 31.76, -760.95),
 Vector3.new(2780.70, 31.84, -761.06),
 Vector3.new(2783.90, 31.84, -761.17),
 Vector3.new(2787.23, 31.84, -761.29),
 Vector3.new(2790.56, 31.84, -761.41),
 Vector3.new(2793.89, 31.84, -761.52),
 Vector3.new(2796.74, 31.87, -761.62),
 Vector3.new(2796.83, 31.88, -761.62),
 Vector3.new(2796.83, 31.88, -761.62),
 Vector3.new(2796.83, 31.88, -761.62),
 Vector3.new(2796.83, 31.88, -761.62)
            }
        },
        {
            Name = "• 2. Parkur",
            Positions = {
                Vector3.new(2530.75, 43.75, -849.56),
                Vector3.new(2527.69, 41.54, -849.32),
                Vector3.new(2524.22, 44.93, -849.33),
                Vector3.new(2521.16, 47.83, -849.33),
                Vector3.new(2517.69, 48.93, -849.33)
            }
        },
        {
            Name = "• 3. Parkur",
            Positions = {
                Vector3.new(2430.48, 36.49, -1087.72),
                Vector3.new(2430.48, 31.62, -1088.33),
                Vector3.new(2430.47, 31.83, -1087.34),
                Vector3.new(2430.50, 36.42, -1085.77),
                Vector3.new(2430.51, 38.71, -1085.36)
            }
        },
        {
            Name = "• 4. Parkur",
            Positions = {
                Vector3.new(2974.51, 32.10, -1066.85),
                Vector3.new(2974.51, 30.88, -1066.85),
                Vector3.new(2974.51, 32.06, -1066.85),
                Vector3.new(2974.51, 48.43, -1066.85),
                Vector3.new(2974.51, 67.67, -1066.85)
            }
        }
    }
}

local MovementSystem = {}
MovementSystem.__index = MovementSystem

function MovementSystem.new()
    local self = setmetatable({}, MovementSystem)
    self.Active = false
    self.CurrentRoute = nil
    self.CurrentIndex = 1
    self.Connection = nil
    return self
end

function MovementSystem:SmoothMove(startPos, endPos, duration)
    local startTime = os.clock()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return false end
    
    local rootPart = character.HumanoidRootPart
    local startCFrame = rootPart.CFrame
    
    while os.clock() - startTime < duration and self.Active do
        local progress = (os.clock() - startTime) / duration
        progress = math.min(progress, 1)
        
        local currentPos = startPos:Lerp(endPos, progress)
        local lookDir = (endPos - currentPos) * Vector3.new(1, 0, 1)
        
        if lookDir.Magnitude > 0 then
            rootPart.CFrame = CFrame.new(currentPos, currentPos + lookDir.Unit)
        else
            rootPart.CFrame = CFrame.new(currentPos)
        end
        
        RunService.Heartbeat:Wait()
    end
    
    if self.Active then
        rootPart.CFrame = CFrame.new(endPos)
        return true
    end
    return false
end

function MovementSystem:ProcessPositions()
    self.CurrentIndex = 1
    while self.Active and self.CurrentIndex <= #self.CurrentRoute.Positions do
        local targetPos = self.CurrentRoute.Positions[self.CurrentIndex]
        local character = LocalPlayer.Character
        
        if character and character:FindFirstChild("HumanoidRootPart") then
            local startPos = character.HumanoidRootPart.Position
            local distance = (targetPos - startPos).Magnitude
            local duration = distance / 40
            
            if not self:SmoothMove(startPos, targetPos, duration) then
                break
            end
        end
        
        self.CurrentIndex = self.CurrentIndex + 1
    end
    
    self.Active = false
end

function MovementSystem:StartRoute(route)
    self:Stop()
    self.Active = true
    self.CurrentRoute = route
    self.Connection = task.spawn(function() self:ProcessPositions() end)
end

function MovementSystem:Stop()
    self.Active = false
    if self.Connection then
        task.cancel(self.Connection)
        self.Connection = nil
    end
end

local gui = Instance.new("ScreenGui", PlayerGui)
gui.Name = "SydearrUI"
gui.ResetOnSpawn = false

local main = Instance.new("Frame", gui)
main.AnchorPoint = Vector2.new(0.5, 0.5)
main.Position = UDim2.new(0.5, 0, 0.5, 0)
main.Size = UDim2.new(0, 300, 0, 260)
main.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
main.BackgroundTransparency = 0.05
main.BorderSizePixel = 0
main.Active = true
main.Draggable = true
Instance.new("UICorner", main).CornerRadius = UDim.new(0, 12)

local topBar = Instance.new("Frame", main)
topBar.Size = UDim2.new(1, 0, 0, 36)
topBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
topBar.BorderSizePixel = 0
Instance.new("UICorner", topBar).CornerRadius = UDim.new(0, 12)

local catLayout = Instance.new("UIListLayout", topBar)
catLayout.FillDirection = Enum.FillDirection.Horizontal
catLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
catLayout.VerticalAlignment = Enum.VerticalAlignment.Center
catLayout.Padding = UDim.new(0, 4)

local buttonHolder = Instance.new("Frame", main)
buttonHolder.Size = UDim2.new(1, -20, 1, -85)
buttonHolder.Position = UDim2.new(0, 10, 0, 46)
buttonHolder.BackgroundTransparency = 1
buttonHolder.ClipsDescendants = true
local layout = Instance.new("UIListLayout", buttonHolder)
layout.Padding = UDim.new(0, 6)
layout.SortOrder = Enum.SortOrder.LayoutOrder

local function makeTab(text)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 140, 1, -8)
    btn.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    btn.Text = text
    btn.Font = Enum.Font.GothamBold
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.TextSize = 13
    btn.BorderSizePixel = 0
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 8)
    btn.Parent = topBar
    return btn
end

local function createButton(text)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, 0, 0, 34)
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 13
    btn.Text = text
    btn.BorderSizePixel = 0
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 8)
    btn.Parent = buttonHolder
    return btn
end

local function clearButtons()
    for _, child in pairs(buttonHolder:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
end

local function animateIn(textList)
    for i, text in ipairs(textList) do
        task.delay((i - 1) * 0.08, function()
            local btn = createButton(text)
            btn.Position = UDim2.new(1, 0, 0, 0)
            local tween = TweenService:Create(btn, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Position = UDim2.new(0, 0, 0, 0)})
            tween:Play()
        end)
    end
end

local function resizeGUI(count)
    local baseHeight = 135 + (count * 40)
    local tween = TweenService:Create(main, TweenInfo.new(0.35, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 300, 0, baseHeight)})
    tween:Play()
end

local currentTab = nil
local function setActiveTab(tabButton)
    if currentTab then
        currentTab.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    end
    currentTab = tabButton
    tabButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
end

local orBtn = makeTab("▶┆OR-2/OR-9")
local taBtn = makeTab("▶┆TA İçi")

local movementController = MovementSystem.new()

orBtn.MouseButton1Click:Connect(function()
    setActiveTab(orBtn)
    clearButtons()
    resizeGUI(4)
    animateIn({"• 1. Parkur", "• 2. Parkur", "• 3. Parkur", "⏹️ DURDUR"})
    
    for _, btn in pairs(buttonHolder:GetChildren()) do
        if btn:IsA("TextButton") then
            if btn.Text == "⏹️ DURDUR" then
                btn.MouseButton1Click:Connect(function()
                    movementController:Stop()
                end)
            else
                btn.MouseButton1Click:Connect(function()
                    movementController:StartRoute(POSITION_SETS.OR[tonumber(string.match(btn.Text, "%d+"))])
                end)
            end
        end
    end
end)

taBtn.MouseButton1Click:Connect(function()
    setActiveTab(taBtn)
    clearButtons()
    resizeGUI(5)
    animateIn({"• 1. Parkur", "• 2. Parkur", "• 3. Parkur", "• 4. Parkur", "⏹️ DURDUR"})
    
    for _, btn in pairs(buttonHolder:GetChildren()) do
        if btn:IsA("TextButton") then
            if btn.Text == "⏹️ DURDUR" then
                btn.MouseButton1Click:Connect(function()
                    movementController:Stop()
                end)
            else
                btn.MouseButton1Click:Connect(function()
                    movementController:StartRoute(POSITION_SETS.TA[tonumber(string.match(btn.Text, "%d+"))])
                end)
            end
        end
    end
end)

setActiveTab(orBtn)
resizeGUI(4)
animateIn({"• 1. Parkur", "• 2. Parkur", "• 3. Parkur", "⏹️ DURDUR"})

for _, btn in pairs(buttonHolder:GetChildren()) do
    if btn:IsA("TextButton") then
        if btn.Text == "⏹️ DURDUR" then
            btn.MouseButton1Click:Connect(function()
                movementController:Stop()
            end)
        else
            btn.MouseButton1Click:Connect(function()
                movementController:StartRoute(POSITION_SETS.OR[tonumber(string.match(btn.Text, "%d+"))])
            end)
        end
    end
end

local credit = Instance.new("TextLabel", main)
credit.Size = UDim2.new(1, 0, 0, 28)
credit.AnchorPoint = Vector2.new(0.5, 0.5)
credit.Position = UDim2.new(0.5, 0, 1, -45)
credit.BackgroundTransparency = 1
credit.Text = "Sydearr Team"
credit.Font = Enum.Font.GothamBlack
credit.TextSize = 16
credit.TextXAlignment = Enum.TextXAlignment.Center
credit.TextYAlignment = Enum.TextYAlignment.Center
credit.TextColor3 = Color3.fromRGB(100, 200, 255)
credit.TextStrokeTransparency = 0.4

local gradient = Instance.new("UIGradient", credit)
gradient.Rotation = 0
gradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 200, 255)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 200, 255))
}
gradient.Transparency = NumberSequence.new{
    NumberSequenceKeypoint.new(0, 0),
    NumberSequenceKeypoint.new(0.5, 0.05),
    NumberSequenceKeypoint.new(1, 0)
}

task.spawn(function()
    while true do
        local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        local tween1 = TweenService:Create(gradient, tweenInfo, {Offset = Vector2.new(1, 0)})
        local tween2 = TweenService:Create(gradient, tweenInfo, {Offset = Vector2.new(-1, 0)})
        tween1:Play()
        tween1.Completed:Wait()
        tween2:Play()
        tween2.Completed:Wait()
    end
end)
